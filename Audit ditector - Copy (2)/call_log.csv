st.write("### Sample dispositions and unique values")
st.write(df['Disposition'].unique())

st.write("### Sample recording length types and sample values")
st.write(df['Recording Length (Seconds)'].head())
st.write(df['Recording Length (Seconds)'].dtype)



df['Disposition'] = df['Disposition'].str.strip()

df.columns = df.columns.str.strip()
df['Disposition'] = df['Disposition'].str.strip()
df['Recording Length (Seconds)'] = pd.to_numeric(df['Recording Length (Seconds)'], errors='coerce')




how to add this codes  to this mian code 

import streamlit as st
import pandas as pd

st.set_page_config(page_title="ReadyMode Call Audit Tool", layout="wide")

st.title("üìû RES-VA Call Audit Automation")
st.caption("App developed by Mohamed Abdo")

uploaded_file = st.file_uploader("Upload your exported Call Log CSV", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    # Clean column names
    df.columns = df.columns.str.strip()

    # Ensure 'Recording Length (Seconds)' is numeric (force errors to NaN)
    df['Recording Length (Seconds)'] = pd.to_numeric(df['Recording Length (Seconds)'], errors='coerce')

    # Add separated flags for Voicemail and Dead Call over 15 seconds
    df['Flag - Voicemail Over 15 sec'] = df.apply(
        lambda row: 'Check' if row['Disposition'] == 'Voicemail' and row['Recording Length (Seconds)'] > 15 else '', axis=1)

    df['Flag - Dead Call Over 15 sec'] = df.apply(
        lambda row: 'Check' if row['Disposition'] == 'Dead Call' and row['Recording Length (Seconds)'] > 15 else '', axis=1)

    # Other flags
    df['Flag - Decision Maker - NYI Under 10 sec'] = df.apply(
        lambda row: 'Check' if row['Disposition'] == 'Decision Maker - NYI' and row['Recording Length (Seconds)'] < 10 else '', axis=1)

    df['Flag - Wrong Number Under 10 sec'] = df.apply(
        lambda row: 'Check' if row['Disposition'] == 'Wrong Number' and row['Recording Length (Seconds)'] < 10 else '', axis=1)

    df['Flag - Unknown'] = df.apply(
        lambda row: 'Check' if row['Disposition'] == 'Unknown' else '', axis=1)

    # Agent summary counts
    agent_summary = df.groupby('Agent Name').agg({
        'Flag - Voicemail Over 15 sec': lambda x: (x == 'Check').sum(),
        'Flag - Dead Call Over 15 sec': lambda x: (x == 'Check').sum(),
        'Flag - Decision Maker - NYI Under 10 sec': lambda x: (x == 'Check').sum(),
        'Flag - Wrong Number Under 10 sec': lambda x: (x == 'Check').sum(),
        'Flag - Unknown': lambda x: (x == 'Check').sum(),
        'Disposition': lambda x: (x == 'Unknown').sum(),
    }).reset_index()

    agent_summary.rename(columns={
        'Disposition': 'Unknown Calls'
    }, inplace=True)

    agent_summary['Unknown Over 50 Calls'] = agent_summary.apply(
        lambda row: '‚ö†Ô∏è Check' if row['Unknown Calls'] > 50 else '', axis=1)

    # Overall summary counts
    total_voicemail = df['Flag - Voicemail Over 15 sec'].value_counts().get('Check', 0)
    total_deadcall = df['Flag - Dead Call Over 15 sec'].value_counts().get('Check', 0)
    total_decision_maker_nyi = df['Flag - Decision Maker - NYI Under 10 sec'].value_counts().get('Check', 0)
    total_wrong_number_under = df['Flag - Wrong Number Under 10 sec'].value_counts().get('Check', 0)
    total_unknown = df['Flag - Unknown'].value_counts().get('Check', 0)
    total_flagged = df[[
        'Flag - Voicemail Over 15 sec',
        'Flag - Dead Call Over 15 sec',
        'Flag - Decision Maker - NYI Under 10 sec',
        'Flag - Wrong Number Under 10 sec',
        'Flag - Unknown'
    ]].apply(lambda x: 'Check' in x.values, axis=1).sum()

    st.write("### üöÄ Overall Summary")
    st.info(f"""
    - **Voicemail Calls Over 15 sec:** {total_voicemail}
    - **Dead Calls Over 15 sec:** {total_deadcall}
    - **Decision Maker - NYI Under 10 sec:** {total_decision_maker_nyi}
    - **Wrong Number Calls Under 10 sec:** {total_wrong_number_under}
    - **Unknown Calls:** {total_unknown}
    - **Total Flagged Calls:** {total_flagged}
    """)

    st.write("### üë• Agent Summary - Issues Overview")
    st.dataframe(agent_summary)

    flagged_calls = df[
        (df['Flag - Voicemail Over 15 sec'] == 'Check') |
        (df['Flag - Dead Call Over 15 sec'] == 'Check') |
        (df['Flag - Decision Maker - NYI Under 10 sec'] == 'Check') |
        (df['Flag - Wrong Number Under 10 sec'] == 'Check') |
        (df['Flag - Unknown'] == 'Check')
    ]

    st.write("### üìã Flagged Calls (With Phone Numbers)")
    st.dataframe(flagged_calls[['Agent Name', 'Phone Number', 'Disposition', 'Recording Length (Seconds)',
                                'Flag - Voicemail Over 15 sec',
                                'Flag - Dead Call Over 15 sec',
                                'Flag - Decision Maker - NYI Under 10 sec',
                                'Flag - Wrong Number Under 10 sec',
                                'Flag - Unknown']])

    st.download_button(
        "‚¨áÔ∏è Download Agent Summary",
        agent_summary.to_csv(index=False).encode('utf-8'),
        "agent_summary_flags.csv",
        "text/csv"
    )

    st.download_button(
        "‚¨áÔ∏è Download Flagged Calls",
        flagged_calls.to_csv(index=False).encode('utf-8'),
        "call_log_with_flags.csv",
        "text/csv"
    )

else:
    st.info("Please upload your exported call log CSV file to start the audit.")
